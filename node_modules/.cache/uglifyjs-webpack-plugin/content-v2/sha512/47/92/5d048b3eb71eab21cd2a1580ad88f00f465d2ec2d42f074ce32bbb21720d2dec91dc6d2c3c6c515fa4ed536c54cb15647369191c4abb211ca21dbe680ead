{"code":"!function(n){var r={};function e(t){if(r[t])return r[t].exports;var a=r[t]={i:t,l:!1,exports:{}};return n[t].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=n,e.c=r,e.d=function(n,r,t){e.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:t})},e.r=function(n){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})},e.t=function(n,r){if(1&r&&(n=e(n)),8&r)return n;if(4&r&&\"object\"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:n}),2&r&&\"string\"!=typeof n)for(var a in n)e.d(t,a,function(r){return n[r]}.bind(null,a));return t},e.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(r,\"a\",r),r},e.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},e.p=\"\",e(e.s=1)}([,function(module,exports){eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/**\\r\\n * Common database helper functions.\\r\\n */\\nvar DBHelper =\\n/*#__PURE__*/\\nfunction () {\\n  function DBHelper() {\\n    _classCallCheck(this, DBHelper);\\n  }\\n\\n  _createClass(DBHelper, null, [{\\n    key: \"fetchRestaurants\",\\n\\n    /**\\r\\n     * Fetch all restaurants.\\r\\n     */\\n    value: function fetchRestaurants(callback) {\\n      var xhr = new XMLHttpRequest();\\n      xhr.open(\\'GET\\', DBHelper.DATABASE_URL);\\n\\n      xhr.onload = function () {\\n        if (xhr.status === 200) {\\n          // Got a success response from server!\\n          var json = JSON.parse(xhr.responseText);\\n          var restaurants = json.restaurants;\\n          callback(null, restaurants);\\n        } else {\\n          // Oops!. Got an error from server.\\n          var error = \"Request failed. Returned status of \".concat(xhr.status);\\n          callback(error, null);\\n        }\\n      };\\n\\n      xhr.send();\\n    }\\n    /**\\r\\n     * Fetch a restaurant by its ID.\\r\\n     */\\n\\n  }, {\\n    key: \"fetchRestaurantById\",\\n    value: function fetchRestaurantById(id, callback) {\\n      // fetch all restaurants with proper error handling.\\n      DBHelper.fetchRestaurants(function (error, restaurants) {\\n        if (error) {\\n          callback(error, null);\\n        } else {\\n          var restaurant = restaurants.find(function (r) {\\n            return r.id == id;\\n          });\\n\\n          if (restaurant) {\\n            // Got the restaurant\\n            callback(null, restaurant);\\n          } else {\\n            // Restaurant does not exist in the database\\n            callback(\\'Restaurant does not exist\\', null);\\n          }\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Fetch restaurants by a cuisine type with proper error handling.\\r\\n     */\\n\\n  }, {\\n    key: \"fetchRestaurantByCuisine\",\\n    value: function fetchRestaurantByCuisine(cuisine, callback) {\\n      // Fetch all restaurants  with proper error handling\\n      DBHelper.fetchRestaurants(function (error, restaurants) {\\n        if (error) {\\n          callback(error, null);\\n        } else {\\n          // Filter restaurants to have only given cuisine type\\n          var results = restaurants.filter(function (r) {\\n            return r.cuisine_type == cuisine;\\n          });\\n          callback(null, results);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Fetch restaurants by a neighborhood with proper error handling.\\r\\n     */\\n\\n  }, {\\n    key: \"fetchRestaurantByNeighborhood\",\\n    value: function fetchRestaurantByNeighborhood(neighborhood, callback) {\\n      // Fetch all restaurants\\n      DBHelper.fetchRestaurants(function (error, restaurants) {\\n        if (error) {\\n          callback(error, null);\\n        } else {\\n          // Filter restaurants to have only given neighborhood\\n          var results = restaurants.filter(function (r) {\\n            return r.neighborhood == neighborhood;\\n          });\\n          callback(null, results);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\\r\\n     */\\n\\n  }, {\\n    key: \"fetchRestaurantByCuisineAndNeighborhood\",\\n    value: function fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\\n      // Fetch all restaurants\\n      DBHelper.fetchRestaurants(function (error, restaurants) {\\n        if (error) {\\n          callback(error, null);\\n        } else {\\n          var results = restaurants;\\n\\n          if (cuisine != \\'all\\') {\\n            // filter by cuisine\\n            results = results.filter(function (r) {\\n              return r.cuisine_type == cuisine;\\n            });\\n          }\\n\\n          if (neighborhood != \\'all\\') {\\n            // filter by neighborhood\\n            results = results.filter(function (r) {\\n              return r.neighborhood == neighborhood;\\n            });\\n          }\\n\\n          callback(null, results);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Fetch all neighborhoods with proper error handling.\\r\\n     */\\n\\n  }, {\\n    key: \"fetchNeighborhoods\",\\n    value: function fetchNeighborhoods(callback) {\\n      // Fetch all restaurants\\n      DBHelper.fetchRestaurants(function (error, restaurants) {\\n        if (error) {\\n          callback(error, null);\\n        } else {\\n          // Get all neighborhoods from all restaurants\\n          var neighborhoods = restaurants.map(function (v, i) {\\n            return restaurants[i].neighborhood;\\n          }); // Remove duplicates from neighborhoods\\n\\n          var uniqueNeighborhoods = neighborhoods.filter(function (v, i) {\\n            return neighborhoods.indexOf(v) == i;\\n          });\\n          callback(null, uniqueNeighborhoods);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Fetch all cuisines with proper error handling.\\r\\n     */\\n\\n  }, {\\n    key: \"fetchCuisines\",\\n    value: function fetchCuisines(callback) {\\n      // Fetch all restaurants\\n      DBHelper.fetchRestaurants(function (error, restaurants) {\\n        if (error) {\\n          callback(error, null);\\n        } else {\\n          // Get all cuisines from all restaurants\\n          var cuisines = restaurants.map(function (v, i) {\\n            return restaurants[i].cuisine_type;\\n          }); // Remove duplicates from cuisines\\n\\n          var uniqueCuisines = cuisines.filter(function (v, i) {\\n            return cuisines.indexOf(v) == i;\\n          });\\n          callback(null, uniqueCuisines);\\n        }\\n      });\\n    }\\n    /**\\r\\n     * Restaurant page URL.\\r\\n     */\\n\\n  }, {\\n    key: \"urlForRestaurant\",\\n    value: function urlForRestaurant(restaurant) {\\n      return \"./restaurant.html?id=\".concat(restaurant.id);\\n    }\\n    /**\\r\\n     * Restaurant image URL.\\r\\n     */\\n\\n  }, {\\n    key: \"imageUrlForRestaurant\",\\n    value: function imageUrlForRestaurant(restaurant) {\\n      return \"/img/\".concat(restaurant.photograph);\\n    }\\n    /**\\r\\n     * Map marker for a restaurant.\\r\\n     */\\n\\n  }, {\\n    key: \"mapMarkerForRestaurant\",\\n    value: function mapMarkerForRestaurant(restaurant, map) {\\n      // https://leafletjs.com/reference-1.3.0.html#marker  \\n      var marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng], {\\n        title: restaurant.name,\\n        alt: restaurant.name,\\n        url: DBHelper.urlForRestaurant(restaurant)\\n      });\\n      marker.addTo(newMap);\\n      return marker;\\n    }\\n    /* static mapMarkerForRestaurant(restaurant, map) {\\r\\n      const marker = new google.maps.Marker({\\r\\n        position: restaurant.latlng,\\r\\n        title: restaurant.name,\\r\\n        url: DBHelper.urlForRestaurant(restaurant),\\r\\n        map: map,\\r\\n        animation: google.maps.Animation.DROP}\\r\\n      );\\r\\n      return marker;\\r\\n    } */\\n\\n  }, {\\n    key: \"DATABASE_URL\",\\n\\n    /**\\r\\n     * Database URL.\\r\\n     * Change this to restaurants.json file location on your server.\\r\\n     */\\n    get: function get() {\\n      var port = 8000; // Change this to your server port\\n\\n      return \"http://localhost:\".concat(port, \"/data/restaurants.json\");\\n    }\\n  }]);\\n\\n  return DBHelper;\\n}();\\n\\n//# sourceURL=webpack:///./src/js/dbhelper.js?')}]);","extractedComments":[]}