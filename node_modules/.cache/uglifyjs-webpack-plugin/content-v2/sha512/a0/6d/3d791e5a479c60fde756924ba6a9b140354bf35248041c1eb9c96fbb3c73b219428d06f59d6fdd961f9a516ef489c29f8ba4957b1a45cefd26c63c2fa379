{"code":"!function(e){var n={};function r(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&n&&\"string\"!=typeof e)for(var a in e)r.d(t,a,function(n){return e[n]}.bind(null,a));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,\"a\",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p=\"\",r(r.s=3)}({3:function(module,exports){eval(\"var restaurant;\\nvar newMap;\\n/**\\n * Initialize map as soon as the page is loaded.\\n */\\n\\ndocument.addEventListener('DOMContentLoaded', function (event) {\\n  initMap();\\n});\\n/**\\n * Initialize leaflet map\\n */\\n\\ninitMap = function initMap() {\\n  fetchRestaurantFromURL(function (error, restaurant) {\\n    if (error) {\\n      // Got an error!\\n      console.error(error);\\n    } else {\\n      self.newMap = L.map('map', {\\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\\n        zoom: 16,\\n        scrollWheelZoom: false\\n      });\\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\\n        mapboxToken: '<YOUR API KEY HERE>',\\n        maxZoom: 18,\\n        attribution: 'Map data &copy; <a href=\\\"https://www.openstreetmap.org/\\\">OpenStreetMap</a> contributors, ' + '<a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA</a>, ' + 'Imagery Â© <a href=\\\"https://www.mapbox.com/\\\">Mapbox</a>',\\n        id: 'mapbox.streets'\\n      }).addTo(newMap);\\n      fillBreadcrumb();\\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\\n    }\\n  });\\n};\\n/* window.initMap = () => {\\n  fetchRestaurantFromURL((error, restaurant) => {\\n    if (error) { // Got an error!\\n      console.error(error);\\n    } else {\\n      self.map = new google.maps.Map(document.getElementById('map'), {\\n        zoom: 16,\\n        center: restaurant.latlng,\\n        scrollwheel: false\\n      });\\n      fillBreadcrumb();\\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\\n    }\\n  });\\n} */\\n\\n/**\\n * Get current restaurant from page URL.\\n */\\n\\n\\nfetchRestaurantFromURL = function fetchRestaurantFromURL(callback) {\\n  if (self.restaurant) {\\n    // restaurant already fetched!\\n    callback(null, self.restaurant);\\n    return;\\n  }\\n\\n  var id = getParameterByName('id');\\n\\n  if (!id) {\\n    // no id found in URL\\n    error = 'No restaurant id in URL';\\n    callback(error, null);\\n  } else {\\n    DBHelper.fetchRestaurantById(id, function (error, restaurant) {\\n      self.restaurant = restaurant;\\n\\n      if (!restaurant) {\\n        console.error(error);\\n        return;\\n      }\\n\\n      fillRestaurantHTML();\\n      callback(null, restaurant);\\n    });\\n  }\\n};\\n/**\\n * Create restaurant HTML and add it to the webpage\\n */\\n\\n\\nfillRestaurantHTML = function fillRestaurantHTML() {\\n  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;\\n  var name = document.getElementById('restaurant-name');\\n  name.innerHTML = restaurant.name;\\n  var address = document.getElementById('restaurant-address');\\n  address.innerHTML = restaurant.address;\\n  var imageID = restaurant.photograph.slice(0, -4);\\n  var image = document.getElementById('restaurant-img');\\n  image.className = 'restaurant-img';\\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\\n  image.setAttribute('srcset', \\\"/images/\\\".concat(imageID, \\\"-430w.jpg 430w,\\\\n   /images/\\\").concat(imageID, \\\"-600w.jpg 600w\\\"));\\n  image.setAttribute('sizes', \\\"(max-width: 605px) 430w,\\\\n   600w\\\");\\n  image.setAttribute('alt', \\\"a photo of \\\".concat(restaurant.name, \\\" in \\\").concat(restaurant.neighborhood));\\n  var cuisine = document.getElementById('restaurant-cuisine');\\n  cuisine.innerHTML = restaurant.cuisine_type; // fill operating hours\\n\\n  if (restaurant.operating_hours) {\\n    fillRestaurantHoursHTML();\\n  } // fill reviews\\n\\n\\n  fillReviewsHTML();\\n};\\n/**\\n * Create restaurant operating hours HTML table and add it to the webpage.\\n */\\n\\n\\nfillRestaurantHoursHTML = function fillRestaurantHoursHTML() {\\n  var operatingHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.operating_hours;\\n  var hours = document.getElementById('restaurant-hours');\\n\\n  for (var key in operatingHours) {\\n    var row = document.createElement('tr');\\n    var day = document.createElement('td');\\n    day.innerHTML = key;\\n    row.appendChild(day);\\n    var time = document.createElement('td');\\n    time.innerHTML = operatingHours[key];\\n    row.appendChild(time);\\n    hours.appendChild(row);\\n  }\\n};\\n/**\\n * Create all reviews HTML and add them to the webpage.\\n */\\n\\n\\nfillReviewsHTML = function fillReviewsHTML() {\\n  var reviews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant.reviews;\\n  var container = document.getElementById('reviews-container');\\n  var title = document.createElement('h2');\\n  title.innerHTML = 'Reviews';\\n  container.appendChild(title);\\n\\n  if (!reviews) {\\n    var noReviews = document.createElement('p');\\n    noReviews.innerHTML = 'No reviews yet!';\\n    container.appendChild(noReviews);\\n    return;\\n  }\\n\\n  var ul = document.getElementById('reviews-list');\\n  reviews.forEach(function (review) {\\n    ul.appendChild(createReviewHTML(review));\\n  });\\n  container.appendChild(ul);\\n};\\n/**\\n * Create review HTML and add it to the webpage.\\n */\\n\\n\\ncreateReviewHTML = function createReviewHTML(review) {\\n  var li = document.createElement('li');\\n  var name = document.createElement('p');\\n  name.innerHTML = review.name;\\n  li.appendChild(name);\\n  var date = document.createElement('p');\\n  date.innerHTML = review.date;\\n  li.appendChild(date);\\n  var rating = document.createElement('p');\\n  rating.innerHTML = \\\"Rating: \\\".concat(review.rating);\\n  li.appendChild(rating);\\n  var comments = document.createElement('p');\\n  comments.innerHTML = review.comments;\\n  li.appendChild(comments);\\n  return li;\\n};\\n/**\\n * Add restaurant name to the breadcrumb navigation menu\\n */\\n\\n\\nfillBreadcrumb = function fillBreadcrumb() {\\n  var restaurant = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurant;\\n  var breadcrumb = document.getElementById('breadcrumb');\\n  var li = document.createElement('li');\\n  li.innerHTML = restaurant.name;\\n  breadcrumb.appendChild(li);\\n};\\n/**\\n * Get a parameter by name from page URL.\\n */\\n\\n\\ngetParameterByName = function getParameterByName(name, url) {\\n  if (!url) url = window.location.href;\\n  name = name.replace(/[\\\\[\\\\]]/g, '\\\\\\\\$&');\\n  var regex = new RegExp(\\\"[?&]\\\".concat(name, \\\"(=([^&#]*)|&|#|$)\\\")),\\n      results = regex.exec(url);\\n  if (!results) return null;\\n  if (!results[2]) return '';\\n  return decodeURIComponent(results[2].replace(/\\\\+/g, ' '));\\n};\\n\\n//# sourceURL=webpack:///./src/js/restaurant_info.js?\")}});","extractedComments":[]}