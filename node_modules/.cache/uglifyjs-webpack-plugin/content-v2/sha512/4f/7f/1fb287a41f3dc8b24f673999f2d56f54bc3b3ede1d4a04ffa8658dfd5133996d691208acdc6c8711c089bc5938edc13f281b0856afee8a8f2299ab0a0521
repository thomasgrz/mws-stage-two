{"code":"!function(n){var e={};function r(t){if(e[t])return e[t].exports;var a=e[t]={i:t,l:!1,exports:{}};return n[t].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},r.r=function(n){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&\"object\"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:n}),2&e&&\"string\"!=typeof n)for(var a in n)r.d(t,a,function(e){return n[e]}.bind(null,a));return t},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,\"a\",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p=\"\",r(r.s=0)}([function(module,exports){eval(\"var restaurants, neighborhoods, cuisines;\\nvar newMap;\\nvar markers = [];\\n/**\\r\\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\\r\\n */\\n\\ndocument.addEventListener('DOMContentLoaded', function (event) {\\n  initMap(); // added \\n\\n  fetchNeighborhoods();\\n  fetchCuisines();\\n\\n  if ('serviceWorker' in navigator) {\\n    window.addEventListener('load', function () {\\n      navigator.serviceWorker.register('../index.js').then(function (reg) {\\n        console.log(\\\"service worker has been registered for \\\".concat(reg.scope));\\n      }).catch(function (error) {\\n        console.log(error);\\n      });\\n    });\\n  }\\n});\\n/**\\r\\n * Fetch all neighborhoods and set their HTML.\\r\\n */\\n\\nfetchNeighborhoods = function fetchNeighborhoods() {\\n  DBHelper.fetchNeighborhoods(function (error, neighborhoods) {\\n    if (error) {\\n      // Got an error\\n      console.error(error);\\n    } else {\\n      self.neighborhoods = neighborhoods;\\n      fillNeighborhoodsHTML();\\n    }\\n  });\\n};\\n/**\\r\\n * Set neighborhoods HTML.\\r\\n */\\n\\n\\nfillNeighborhoodsHTML = function fillNeighborhoodsHTML() {\\n  var neighborhoods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.neighborhoods;\\n  var select = document.getElementById('neighborhoods-select');\\n  neighborhoods.forEach(function (neighborhood) {\\n    var option = document.createElement('option');\\n    option.innerHTML = neighborhood;\\n    option.value = neighborhood;\\n    select.append(option);\\n  });\\n};\\n/**\\r\\n * Fetch all cuisines and set their HTML.\\r\\n */\\n\\n\\nfetchCuisines = function fetchCuisines() {\\n  DBHelper.fetchCuisines(function (error, cuisines) {\\n    if (error) {\\n      // Got an error!\\n      console.error(error);\\n    } else {\\n      self.cuisines = cuisines;\\n      fillCuisinesHTML();\\n    }\\n  });\\n};\\n/**\\r\\n * Set cuisines HTML.\\r\\n */\\n\\n\\nfillCuisinesHTML = function fillCuisinesHTML() {\\n  var cuisines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cuisines;\\n  var select = document.getElementById('cuisines-select');\\n  cuisines.forEach(function (cuisine) {\\n    var option = document.createElement('option');\\n    option.innerHTML = cuisine;\\n    option.value = cuisine;\\n    select.append(option);\\n  });\\n};\\n/**\\r\\n * Initialize leaflet map, called from HTML.\\r\\n */\\n\\n\\ninitMap = function initMap() {\\n  debugger;\\n  self.newMap = L.map('map', {\\n    center: [40.722216, -73.987501],\\n    zoom: 12,\\n    scrollWheelZoom: false\\n  });\\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\\n    mapboxToken: 'pk.eyJ1IjoidG9tbXlncnoiLCJhIjoiY2ppYzBuNTZ6MW5oODN2bmJwM3IyMjk4ZSJ9.toCCy9DpmW8inRwr_BCbjA',\\n    maxZoom: 18,\\n    attribution: 'Map data &copy; <a href=\\\"https://www.openstreetmap.org/\\\">OpenStreetMap</a> contributors, ' + '<a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA</a>, ' + 'Imagery Â© <a href=\\\"https://www.mapbox.com/\\\">Mapbox</a>',\\n    id: 'mapbox.streets'\\n  }).addTo(newMap);\\n  updateRestaurants();\\n};\\n/* window.initMap = () => {\\r\\n  let loc = {\\r\\n    lat: 40.722216,\\r\\n    lng: -73.987501\\r\\n  };\\r\\n  self.map = new google.maps.Map(document.getElementById('map'), {\\r\\n    zoom: 12,\\r\\n    center: loc,\\r\\n    scrollwheel: false\\r\\n  });\\r\\n  updateRestaurants();\\r\\n} */\\n\\n/**\\r\\n * Update page and map for current restaurants.\\r\\n */\\n\\n\\nupdateRestaurants = function updateRestaurants() {\\n  var cSelect = document.getElementById('cuisines-select');\\n  var nSelect = document.getElementById('neighborhoods-select');\\n  var cIndex = cSelect.selectedIndex;\\n  var nIndex = nSelect.selectedIndex;\\n  var cuisine = cSelect[cIndex].value;\\n  var neighborhood = nSelect[nIndex].value;\\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, function (error, restaurants) {\\n    if (error) {\\n      // Got an error!\\n      console.error(error);\\n    } else {\\n      resetRestaurants(restaurants);\\n      fillRestaurantsHTML();\\n    }\\n  });\\n};\\n/**\\r\\n * Clear current restaurants, their HTML and remove their map markers.\\r\\n */\\n\\n\\nresetRestaurants = function resetRestaurants(restaurants) {\\n  // Remove all restaurants\\n  self.restaurants = [];\\n  var ul = document.getElementById('restaurants-list');\\n  ul.innerHTML = ''; // Remove all map markers\\n\\n  self.markers.forEach(function (m) {\\n    return m.setMap(null);\\n  });\\n  self.markers = [];\\n  self.restaurants = restaurants;\\n};\\n/**\\r\\n * Create all restaurants HTML and add them to the webpage.\\r\\n */\\n\\n\\nfillRestaurantsHTML = function fillRestaurantsHTML() {\\n  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;\\n  var ul = document.getElementById('restaurants-list');\\n  restaurants.forEach(function (restaurant) {\\n    ul.append(createRestaurantHTML(restaurant));\\n  });\\n  addMarkersToMap();\\n};\\n/**\\r\\n * Create restaurant HTML.\\r\\n */\\n\\n\\ncreateRestaurantHTML = function createRestaurantHTML(restaurant) {\\n  var li = document.createElement('li');\\n  /* image size variables */\\n\\n  var imageID = restaurant.photograph.slice(0, -4);\\n  var image = document.createElement('img');\\n  image.className = 'restaurant-img';\\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\\n  image.setAttribute('srcset', \\\"/images/\\\".concat(imageID, \\\"-220w.jpg 220w,\\\\n     /images/\\\").concat(imageID, \\\"-300w.jpg 300w,\\\\n     /images/\\\").concat(imageID, \\\"-430w.jpg 430w\\\"));\\n  image.setAttribute('sizes', \\\"(max-width: 550px) 220w,\\\\n     (max-width: 900px) 300w,\\\\n      430w\\\");\\n  image.setAttribute('alt', \\\"a photo of \\\".concat(restaurant.name, \\\" in \\\").concat(restaurant.neighborhood));\\n  li.append(image);\\n  var name = document.createElement('h1');\\n  name.innerHTML = restaurant.name;\\n  li.append(name);\\n  var neighborhood = document.createElement('p');\\n  neighborhood.innerHTML = restaurant.neighborhood;\\n  li.append(neighborhood);\\n  var address = document.createElement('p');\\n  address.innerHTML = restaurant.address;\\n  li.append(address);\\n  var more = document.createElement('a');\\n  more.innerHTML = 'View Details';\\n  more.href = DBHelper.urlForRestaurant(restaurant);\\n  more.setAttribute('aria-role', 'button');\\n  li.append(more);\\n  return li;\\n};\\n/**\\r\\n * Add markers for current restaurants to the map.\\r\\n */\\n\\n\\naddMarkersToMap = function addMarkersToMap() {\\n  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;\\n  restaurants.forEach(function (restaurant) {\\n    // Add marker to the map\\n    var marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\\n    marker.on(\\\"click\\\", onClick);\\n\\n    function onClick() {\\n      window.location.href = marker.options.url;\\n    }\\n  });\\n};\\n/* addMarkersToMap = (restaurants = self.restaurants) => {\\r\\n  restaurants.forEach(restaurant => {\\r\\n    // Add marker to the map\\r\\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\\r\\n    google.maps.event.addListener(marker, 'click', () => {\\r\\n      window.location.href = marker.url\\r\\n    });\\r\\n    self.markers.push(marker);\\r\\n  });\\r\\n} */\\n\\n//# sourceURL=webpack:///./src/js/main.js?\")}]);","extractedComments":[]}